"use client";

import { DatePicker } from "@/components/datepicker";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useGetSingleData, useUpdateData } from "@/hooks/useFetch";
import { useEffect, useState, useRef } from "react"; // ðŸ’¡ Import useRef
import type { Certificate } from "@/types/certificates";
import { FaEdit } from "react-icons/fa";
import Image from "next/image"; // ðŸ’¡ Import Next.js Image component

interface CertificateFormDialogProps {
  id: string;
}

export function CertificateEditFormDialog({ id }: CertificateFormDialogProps) {
  const [open, setOpen] = useState(false);

  const { data } = useGetSingleData<Certificate>(
    id,
    "/api/v1/admin/certificate/get",
    "certificate",
    { enabled: open }
  );
  // Type FormData is correct for file uploads
  const { mutate } = useUpdateData<FormData>(
    "/api/v1/admin/certificate/put",
    "certificate"
  );

  // State initialization
  const [issueDate, setIssueDate] = useState<Date | undefined>(undefined);
  const [expirationDate, setExpirationDate] = useState<Date | undefined>(
    undefined
  );
  const [cert_name, setCertName] = useState<string>("");
  const [issuer, setIssuer] = useState<string>("");
  const [cert_url, setCertUrl] = useState<string>("");

  // ðŸ’¡ NEW STATE: For image preview (current URL or temporary new file URL)
  const [imagePreviewUrl, setImagePreviewUrl] = useState<string | null>(null);
  // ðŸ’¡ NEW REF: To store the actual File object to be sent on submit
  const fileInputRef = useRef<HTMLInputElement>(null);

  // 1. Load data into state when 'data' changes
  useEffect(() => {
    if (data) {
      setCertName(data.cert_name || "");
      setIssuer(data.issuer || "");
      setCertUrl(data.cert_url || "");

      setIssueDate(data.issuer_date ? new Date(data.issuer_date) : undefined);
      setExpirationDate(
        data.expiration_date ? new Date(data.expiration_date) : undefined
      );

      // ðŸ’¡ Set the initial preview URL to the existing image_url
      setImagePreviewUrl(data.image_url || null);
    }
  }, [data]);

  // ðŸ’¡ NEW FUNCTION: Handle file selection and create a temporary preview URL
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Create a local URL for file preview
      const url = URL.createObjectURL(file);
      setImagePreviewUrl(url);
    } else if (data?.image_url) {
      // If the user clears the file input, revert to the original image
      setImagePreviewUrl(data.image_url);
    } else {
      // Clear preview if no file and no existing data
      setImagePreviewUrl(null);
    }
  };

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    // Client-Side Validation
    if (!issueDate || !expirationDate) {
      alert("Please select both Issue Date and Expiration Date.");
      return;
    }

    const form = e.currentTarget;
    const formData = new FormData(form);

    // ðŸ’¡ FIX: Manually manage the file upload to prevent sending an empty file field
    // Remove the default 'image' entry created by the <Input name="image" ...>
    formData.delete("image");

    // Check if a new file was selected (using the ref)
    if (fileInputRef.current?.files?.[0]) {
      // Append the new file to FormData. Your API should handle the file upload.
      formData.append("image", fileInputRef.current.files[0]);
    }
    // If no new file is uploaded, the formData will NOT contain the 'image' key,
    // which tells your API to KEEP the existing image (data.image_url).

    // Append the id
    formData.append("id", id);

    // The date inputs generated by your custom <DatePicker> component should
    // already have the correct 'name' (issuer_date, expiration_date) and
    // formatted value appended to the FormData automatically.

    mutate({ id: id, updates: formData });
    setOpen(false);
  };

  // ðŸ’¡ Clean up the temporary object URL when the component unmounts or data changes
  useEffect(() => {
    return () => {
      if (imagePreviewUrl && imagePreviewUrl.startsWith("blob:")) {
        URL.revokeObjectURL(imagePreviewUrl);
      }
    };
  }, [imagePreviewUrl]);

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className="text-gray-600 hover:text-blue-600"
        >
          <FaEdit className="w-5 h-5" />
        </Button>
      </DialogTrigger>

      <DialogContent className="sm:max-w-[425px] max-h-[520px] overflow-y-auto">
        <form onSubmit={handleSubmit}>
          <DialogHeader>
            <DialogTitle>Edit Certificate</DialogTitle>
            <DialogDescription>
              Update the certificate details below. Click save when you're done.
            </DialogDescription>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            {/* Certificate Name */}
            <div className="grid gap-2">
              <Label htmlFor="cert_name">Certificate Name</Label>
              <Input
                id="cert_name"
                name="cert_name"
                placeholder="e.g., React Developer"
                value={cert_name}
                onChange={(e) => setCertName(e.target.value)}
                required
              />
            </div>

            {/* Issuer */}
            <div className="grid gap-2">
              <Label htmlFor="issuer">Issuer</Label>
              <Input
                id="issuer"
                name="issuer"
                placeholder="e.g., Meta, Coursera"
                value={issuer}
                onChange={(e) => setIssuer(e.target.value)}
                required
              />
            </div>

            {/* Issue Date */}
            <DatePicker
              label="Issue Date"
              name="issuer_date"
              value={issueDate}
              onChange={setIssueDate}
              fromYear={1980}
              required={true}
            />

            {/* Expiration Date */}
            <DatePicker
              label="Expiration Date"
              name="expiration_date"
              value={expirationDate}
              onChange={setExpirationDate}
              fromYear={new Date().getFullYear()}
              toYear={new Date().getFullYear() + 20}
              required={true}
            />

            {/* Certificate URL */}
            <div className="grid gap-2">
              <Label htmlFor="cert_url">Certificate URL</Label>
              <Input
                id="cert_url"
                name="cert_url"
                type="url"
                placeholder="https://example.com/certificate"
                value={cert_url}
                onChange={(e) => setCertUrl(e.target.value)}
                required
              />
            </div>

            {/* Certificate Image & Preview */}
            <div className="grid gap-2">
              <Label htmlFor="image">Certificate Image (Optional)</Label>
              <Input
                id="image"
                name="image_placeholder" // ðŸ’¡ Change name to a placeholder to prevent empty file being sent
                type="file"
                accept="image/*"
                required={false}
                // ðŸ’¡ Add ref and file change handler
                ref={fileInputRef}
                onChange={handleFileChange}
              />

              {/* ðŸ’¡ IMAGE PREVIEW SECTION */}
              {imagePreviewUrl && (
                <div className="mt-2 relative w-full h-40 border-2 border-dashed rounded-md overflow-hidden bg-gray-100">
                  <Image
                    src={imagePreviewUrl}
                    alt="Certificate Preview"
                    fill // Use fill for responsive design
                    style={{ objectFit: "contain" }} // Use 'contain' to ensure the whole image is visible
                    className="p-1" // Add some padding inside the container
                  />
                  <p className="absolute bottom-1 right-2 text-xs text-gray-700 bg-white bg-opacity-70 px-1 rounded">
                    {imagePreviewUrl.startsWith("blob:")
                      ? "New Preview"
                      : "Current Image"}
                  </p>
                </div>
              )}
              {/* END IMAGE PREVIEW SECTION */}

              <p className="text-xs text-gray-500 mt-1">
                {data?.image_url && !imagePreviewUrl
                  ? "Current image not found or removed. Upload a new one."
                  : "Upload a new file to replace the current image."}
              </p>
            </div>
          </div>

          <DialogFooter>
            <DialogClose asChild>
              <Button variant="outline" type="button">
                Cancel
              </Button>
            </DialogClose>
            <Button type="submit">Save Changes</Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}
